üî¥ 25 Exerc√≠cios Dif√≠ceis de Ponteiros (Aplica√ß√µes Pr√°ticas)

üéØ Objetivo: aplicar ponteiros em vetores, matrizes, strings, fun√ß√µes, malloc e estruturas de dados.

26Ô∏è‚É£ Vetor din√¢mico simples

Use malloc para criar um vetor de tamanho n, preencha com n√∫meros e exiba.

27Ô∏è‚É£ Soma de vetor din√¢mico

Crie uma fun√ß√£o que receba um ponteiro e o tamanho do vetor e retorne a soma dos elementos.

28Ô∏è‚É£ Redimensionar vetor

Use realloc para dobrar o tamanho do vetor e leia novos valores.

29Ô∏è‚É£ Libera√ß√£o de mem√≥ria

Crie e preencha um vetor com malloc, depois use free() e mostre que o ponteiro agora √© inv√°lido.

30Ô∏è‚É£ Matriz din√¢mica (ponteiro de ponteiro)

Crie uma matriz NxM com int **matriz, leia e exiba os valores.

31Ô∏è‚É£ Troca de vetores

Crie uma fun√ß√£o que troque o conte√∫do de dois vetores de mesmo tamanho usando ponteiros.

32Ô∏è‚É£ Copiar vetor

Crie uma fun√ß√£o que copie um vetor em outro usando apenas ponteiros.

33Ô∏è‚É£ String com ponteiros

Crie uma fun√ß√£o que conte o tamanho de uma string sem usar strlen().

34Ô∏è‚É£ Inverter string

Crie uma fun√ß√£o que receba uma string e a inverta usando apenas ponteiros.

35Ô∏è‚É£ Contar vogais

Crie uma fun√ß√£o que receba uma string (char *) e retorne o n√∫mero de vogais.

36Ô∏è‚É£ Concatenar strings

Crie uma fun√ß√£o concatenar(char *destino, char *origem) que una duas strings manualmente.

37Ô∏è‚É£ Comparar strings

Crie uma fun√ß√£o comparar(char *a, char *b) que retorne 1 se forem iguais, 0 caso contr√°rio.

38Ô∏è‚É£ Matriz transposta com ponteiros

Crie uma fun√ß√£o que receba uma matriz NxM e gere sua transposta usando ponteiros.

39Ô∏è‚É£ Vetor de ponteiros para string

Crie um vetor de ponteiros (char *nomes[]) com v√°rios nomes e exiba todos.

40Ô∏è‚É£ Ponteiro em struct

Crie uma struct Pessoa com nome e idade.
Crie um ponteiro para struct e mostre os dados com ->.

41Ô∏è‚É£ Fun√ß√£o com ponteiro para struct

Crie uma fun√ß√£o void mostrarPessoa(struct Pessoa *p) que exiba nome e idade.

42Ô∏è‚É£ Vetor de structs com ponteiros

Crie um vetor de struct Pessoa e percorra-o com ponteiros.

43Ô∏è‚É£ Lista encadeada simples

Crie uma struct No { int valor; struct No *prox; } e permita inserir n√≥s dinamicamente.

44Ô∏è‚É£ Remover elemento da lista

Crie uma fun√ß√£o para remover um n√≥ de uma lista encadeada simples.

45Ô∏è‚É£ Fun√ß√£o que retorna vetor alocado

Crie uma fun√ß√£o que receba n e retorne um ponteiro para vetor preenchido de 1 a n.

46Ô∏è‚É£ Vetor de ponteiros para int

Crie um vetor de ponteiros (int *v[5]) e fa√ßa cada ponteiro apontar para uma vari√°vel diferente.

47Ô∏è‚É£ Passagem por refer√™ncia m√∫ltipla

Crie uma fun√ß√£o divisao(int *a, int *b, int *quociente, int *resto).

48Ô∏è‚É£ Recurs√£o com ponteiro

Crie uma fun√ß√£o recursiva que receba um vetor e o tamanho e exiba os elementos usando ponteiro.

49Ô∏è‚É£ Aloca√ß√£o de matriz triangular

Crie uma matriz triangular inferior (linha i tem i elementos) usando ponteiros duplos.

50Ô∏è‚É£ Ponteiro para fun√ß√£o

Crie uma fun√ß√£o int soma(int a, int b) e um ponteiro para fun√ß√£o que aponte para ela e invoque via ponteiro.

üß≠ Ordem sugerida de aprendizado

Fa√ßa os 25 primeiros para entender a mec√¢nica dos ponteiros (endere√ßos e desrefer√™ncia).

Depois, avance para os 25 seguintes para aplicar em situa√ß√µes reais (strings, structs e mem√≥ria din√¢mica).

Use printf("%p", ptr); constantemente ‚Äî visualizar endere√ßos √© fundamental.